{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글',\n    Images: [{\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = {\n  type: ADD_POST_REQUEST\n};\nexport const addComment = {\n  type: ADD_COMMENT_REQUEST\n};\nconst dummyPost = {\n  id: 2,\n  content: '더미데이터입니다.',\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: true,\n          addPostDone: false,\n          addPostError: null\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: [dummyPost, ...state.mainPosts],\n          addPostLoading: false,\n          addPostDone: true\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: false,\n          addPostError: true\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: true,\n          addCommentDone: false,\n          addCommentError: null\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentError: true\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["D:/program/node_workspace/WEB/React-FullStack/FullStack-practice/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","type","addComment","dummyPost","state","action","addCommentLoading","addCommentDone","addCommentError"],"mappings":"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","sourcesContent":["export const initialState = {\r\n  mainPosts: [{\r\n    id: 1,\r\n    User: {\r\n      id: 1,\r\n      nickname: '제로초',\r\n    },\r\n    content: '첫 번째 게시글',\r\n    Images: [{\r\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n    }, {\r\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n    }, {\r\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n    }],\r\n    Comments: [{\r\n      User: {\r\n        nickname: 'nero',\r\n      },\r\n      content: '우와 개정판이 나왔군요~',\r\n    }, {\r\n      User: {\r\n        nickname: 'hero',\r\n      },\r\n      content: '얼른 사고싶어요~',\r\n    }]\r\n  }],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n};\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = {\r\n  type: ADD_POST_REQUEST,\r\n};\r\n\r\nexport const addComment = {\r\n  type: ADD_COMMENT_REQUEST,\r\n};\r\n\r\nconst dummyPost = {\r\n  id: 2,\r\n  content: '더미데이터입니다.',\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST: {\r\n      return {\r\n        ...state,\r\n        addPostLoading: true,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n      }\r\n    }\r\n    case ADD_POST_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        mainPosts: [dummyPost, ...state.mainPosts],\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n      };\r\n    }\r\n    case ADD_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n        addPostLoading: false,\r\n        addPostError: true,\r\n      }\r\n    }\r\n    case ADD_COMMENT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n        addCommentDone: false,\r\n        addCommentError: null,\r\n      }\r\n    }\r\n    case ADD_COMMENT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentDone: true,\r\n      };\r\n    }\r\n    case ADD_COMMENT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentError: true,\r\n      }\r\n    }\r\n    default: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}